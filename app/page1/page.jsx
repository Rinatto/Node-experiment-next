import '../styles/page.css';

export default function Page1() {
  return (
      <div>
          <h1>JavaScript</h1>
          <p>Следует начать рассмотрение веб-языков, использующих статическую типизацию с JavaScript. В данном языке нет статической типизации, она реализуется с помощью TypeScript или Flow, но поскольку это один из первых веб-языков и ныне действующих следует рассмотреть основные аспекты типизации данного языка.</p>
          <p>JavaScript характеризуется (слабой) динамической типизацией: переменная связывается с типом в момент присваивания значения, а не в момент объявления переменной; в различных участках программы одна и та же переменная может принимать значения разных типов. Типизация в JavaScript также характеризуется как неявная (утиная) – проверка типов выполняется во время выполнения программы. На этапе райнтайма, а не компиляции</p>
          <p>Из-за использования динамической типизации, при приведении типов JavaScript могут получаться неожиданные результаты. Ниже представлен пример приведения типов при использовании математических операций.</p>
          <h2>Пример кода</h2>
          <pre>
              <code>
                  {`1 + '1' // '11'

[] + {} // "[object Object]"

"" + 1 + 0 // "10"

"" - 1 + 0 // -1

true + false // 1
`}
              </code>
          </pre>
          <p>В данном примере наглядно продемонстрировано, как JavaScript обрабатывает операции с разными типами данных с использованием операторов сложения и вычитания. Данный пример показывает слабую типизацию и автоматическое преобразование типов, характерную для JavaScript.</p>
      </div>
  );
}
